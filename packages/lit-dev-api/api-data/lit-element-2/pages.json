[
  {
    "slug": "LitElement",
    "title": "LitElement",
    "versionLinks": {
      "v2": "api/LitElement/"
    },
    "repo": "lit/lit-element",
    "commit": "c9b40e6b26dd7a9361e32421a4343949d242e0ca",
    "items": [
      {
        "name": "LitElement",
        "kindString": "Class",
        "comment": {
          "shortText": "Base element class that manages element properties and attributes, and\nrenders a lit-html template.",
          "text": "To define a component, subclass `LitElement` and implement a\n`render` method to provide the component's template. Define properties\nusing the [`properties`](/docs/v1/api/lit-element/LitElement/#LitElement.properties) property or the [`property`](/docs/v1/api/lit-element/decorators/#property) decorator.\n"
        },
        "children": [
          {
            "name": "constructor",
            "kindString": "Constructor",
            "signatures": [
              {
                "name": "new LitElement",
                "kindString": "Constructor signature",
                "type": {
                  "type": "reference",
                  "name": "LitElement",
                  "location": {
                    "page": "LitElement",
                    "anchor": "LitElement"
                  }
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.constructor"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.constructor",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.constructor"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.constructor"
            }
          },
          {
            "name": "renderRoot",
            "kindString": "Property",
            "flags": {
              "isReadonly": true
            },
            "comment": {
              "shortText": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 216,
                "moduleSpecifier": "lit-element"
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "reference",
                  "name": "Element",
                  "externalLocation": {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
                  }
                },
                {
                  "type": "reference",
                  "name": "DocumentFragment",
                  "externalLocation": {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
                  }
                }
              ]
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.renderRoot"
            }
          },
          {
            "name": "finalized",
            "kindString": "Property",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Ensure this class is marked as `finalized` as an optimization ensuring\nit will not needlessly try to `finalize`.",
              "text": "Note this property name is a string to prevent breaking Closure JS Compiler\noptimizations. See updating-element.ts for more information.\n"
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 109,
                "moduleSpecifier": "lit-element"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "defaultValue": "true",
            "overwrites": {
              "type": "reference",
              "name": "UpdatingElement.finalized",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.finalized"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.finalized"
            }
          },
          {
            "name": "properties",
            "kindString": "Property",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "User-supplied object that maps property names to `PropertyDeclaration`\nobjects containing options for configuring the property."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 248,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "name": "PropertyDeclarations",
              "location": {
                "page": "UpdatingElement",
                "anchor": "PropertyDeclarations"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.properties",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.properties"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.properties"
            }
          },
          {
            "name": "render",
            "kindString": "Property",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Reference to the underlying library method used to render the element's\nDOM. By default, points to the `render` method from lit-html's shady-render\nmodule.",
              "text": "**Most users will never need to touch this property.**\n\nThis  property should not be confused with the `render` instance method,\nwhich should be overridden to define a template for the element.\n\nAdvanced users creating a new base class based on LitElement can override\nthis property to point to a custom render method with a signature that\nmatches [shady-render's `render`\nmethod](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n"
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 128,
                "moduleSpecifier": "lit-element"
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "comment": {
                      "shortText": "Reference to the underlying library method used to render the element's\nDOM. By default, points to the `render` method from lit-html's shady-render\nmodule.",
                      "text": "**Most users will never need to touch this property.**\n\nThis  property should not be confused with the `render` instance method,\nwhich should be overridden to define a template for the element.\n\nAdvanced users creating a new base class based on LitElement can override\nthis property to point to a custom render method with a signature that\nmatches [shady-render's `render`\nmethod](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n"
                    },
                    "parameters": [
                      {
                        "name": "result",
                        "kindString": "Parameter",
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      },
                      {
                        "name": "container",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Element",
                              "externalLocation": {
                                "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
                              }
                            },
                            {
                              "type": "reference",
                              "name": "DocumentFragment",
                              "externalLocation": {
                                "url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "options",
                        "kindString": "Parameter",
                        "type": {
                          "type": "reference",
                          "name": "ShadyRenderOptions"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "void"
                    }
                  }
                ]
              }
            },
            "defaultValue": "...",
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.render"
            }
          },
          {
            "name": "shadowRootOptions",
            "kindString": "Property",
            "flags": {
              "isStatic": true
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 139,
                "moduleSpecifier": "lit-element"
              }
            ],
            "type": {
              "type": "reference",
              "name": "ShadowRootInit",
              "externalLocation": {
                "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow#parameters"
              }
            },
            "defaultValue": "...",
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.shadowRootOptions"
            }
          },
          {
            "name": "styles",
            "kindString": "Property",
            "flags": {
              "isStatic": true,
              "isOptional": true
            },
            "comment": {
              "shortText": "Array of styles to apply to the element. The styles should be defined\nusing the [`css`](/docs/v1/api/lit-element/styles/#css) tag function or via constructible stylesheets."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 136,
                "moduleSpecifier": "lit-element"
              }
            ],
            "type": {
              "type": "reference",
              "name": "CSSResultGroup",
              "location": {
                "page": "styles",
                "anchor": "CSSResultGroup"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.styles"
            }
          },
          {
            "name": "hasUpdated",
            "kindString": "Accessor",
            "flags": {
              "isProtected": true
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 739,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "getSignature": [
              {
                "name": "hasUpdated",
                "kindString": "Get signature",
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.hasUpdated",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.hasUpdated"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.hasUpdated"
            }
          },
          {
            "name": "updateComplete",
            "kindString": "Accessor",
            "comment": {
              "shortText": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.",
              "text": "To await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.\n",
              "returns": "The Promise returns a boolean that indicates if the\nupdate resolved without triggering another update.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 816,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              ],
              "name": "Promise"
            },
            "getSignature": [
              {
                "name": "updateComplete",
                "kindString": "Get signature",
                "comment": {
                  "shortText": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.",
                  "text": "To await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.\n",
                  "returns": "The Promise returns a boolean that indicates if the\nupdate resolved without triggering another update.\n"
                },
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.updateComplete",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.updateComplete"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.updateComplete"
            }
          },
          {
            "name": "observedAttributes",
            "kindString": "Accessor",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns a list of attributes corresponding to the registered properties."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 254,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "getSignature": [
              {
                "name": "observedAttributes",
                "kindString": "Get signature",
                "comment": {
                  "shortText": "Returns a list of attributes corresponding to the registered properties."
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.observedAttributes",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.observedAttributes"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.observedAttributes"
            }
          },
          {
            "name": "adoptStyles",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Applies styling to the element shadowRoot using the [`styles`](/docs/v1/api/lit-element/LitElement/#LitElement.styles)\nproperty. Styling will apply using `shadowRoot.adoptedStyleSheets` where\navailable and will fallback otherwise. When Shadow DOM is polyfilled,\nShadyCSS scopes styles and adds them to the document. When Shadow DOM\nis available but `adoptedStyleSheets` is not, styles are appended to the\nend of the `shadowRoot` to [mimic spec\nbehavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets)."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 258,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "adoptStyles",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.adoptStyles"
            }
          },
          {
            "name": "attributeChangedCallback",
            "kindString": "Method",
            "comment": {
              "shortText": "Synchronizes property values when attributes change."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 597,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "attributeChangedCallback",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  },
                  {
                    "name": "old",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "literal",
                          "value": null
                        },
                        {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "literal",
                          "value": null
                        },
                        {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.attributeChangedCallback"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.attributeChangedCallback",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.attributeChangedCallback"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.attributeChangedCallback"
            }
          },
          {
            "name": "connectedCallback",
            "kindString": "Method",
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 281,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "connectedCallback",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "overwrites": {
                  "type": "reference",
                  "name": "UpdatingElement.connectedCallback"
                }
              }
            ],
            "overwrites": {
              "type": "reference",
              "name": "UpdatingElement.connectedCallback",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.connectedCallback"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.connectedCallback"
            }
          },
          {
            "name": "createRenderRoot",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Returns the node into which the element should render and by default\ncreates and returns an open shadowRoot. Implement to customize where the\nelement's DOM is rendered. For example, to render into the element's\nchildNodes, return `this`.",
              "returns": "Returns a node into which to render.\n"
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 244,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "createRenderRoot",
                "kindString": "Call signature",
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "reference",
                      "name": "Element",
                      "externalLocation": {
                        "url": "https://developer.mozilla.org/en-US/docs/Web/API/Element"
                      }
                    },
                    {
                      "type": "reference",
                      "name": "ShadowRoot",
                      "externalLocation": {
                        "url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot"
                      }
                    }
                  ]
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.createRenderRoot"
            }
          },
          {
            "name": "disconnectedCallback",
            "kindString": "Method",
            "comment": {
              "shortText": "Allows for `super.disconnectedCallback()` in extensions while\nreserving the possibility of making non-breaking feature additions\nwhen disconnecting at some point in the future."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 591,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "disconnectedCallback",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.disconnectedCallback"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.disconnectedCallback",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.disconnectedCallback"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.disconnectedCallback"
            }
          },
          {
            "name": "enableUpdating",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 579,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "enableUpdating",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.enableUpdating"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.enableUpdating",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.enableUpdating"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.enableUpdating"
            }
          },
          {
            "name": "firstUpdated",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.",
              "text": "Setting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 914,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "firstUpdated",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.firstUpdated"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.firstUpdated",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.firstUpdated"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.firstUpdated"
            }
          },
          {
            "name": "getUpdateComplete",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Override point for the `updateComplete` promise.",
              "text": "It is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n  class MyElement extends LitElement {\n    async getUpdateComplete() {\n      await super.getUpdateComplete();\n      await this._myChild.updateComplete;\n    }\n  }\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 858,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getUpdateComplete",
                "kindString": "Call signature",
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.getUpdateComplete"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.getUpdateComplete",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.getUpdateComplete"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.getUpdateComplete"
            }
          },
          {
            "name": "initialize",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Performs element initialization. By default this calls\n[`createRenderRoot`](/docs/v1/api/lit-element/LitElement/#LitElement.createRenderRoot) to create the element [`renderRoot`](/docs/v1/api/lit-element/LitElement/#LitElement.renderRoot) node and\ncaptures any pre-set values for registered properties."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 223,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "initialize",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "overwrites": {
                  "type": "reference",
                  "name": "UpdatingElement.initialize"
                }
              }
            ],
            "overwrites": {
              "type": "reference",
              "name": "UpdatingElement.initialize",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.initialize"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.initialize"
            }
          },
          {
            "name": "performUpdate",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Performs an element update. Note, if an exception is thrown during the\nupdate, `firstUpdated` and `updated` will not be called.",
              "text": "You can override this method to change the timing of updates. If this\nmethod is overridden, `super.performUpdate()` must be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```\nprotected async performUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 759,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "performUpdate",
                "kindString": "Call signature",
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "void"
                    },
                    {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Promise"
                    }
                  ]
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.performUpdate"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.performUpdate",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.performUpdate"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.performUpdate"
            }
          },
          {
            "name": "render",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Invoked on each update to perform rendering tasks. This method may return\nany value renderable by lit-html's `NodePart` - typically a\n`TemplateResult`. Setting properties inside this method will *not* trigger\nthe element to update."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 329,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "render",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.render"
            }
          },
          {
            "name": "requestUpdate",
            "kindString": "Method",
            "comment": {
              "shortText": "Requests an update which is processed asynchronously. This should\nbe called when an element should update based on some state not triggered\nby setting a property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored. Returns the `updateComplete` Promise which is resolved\nwhen the update completes.",
              "returns": "A Promise that is resolved when the update completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 707,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "requestUpdate",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "comment": {
                      "text": "(optional) name of requesting property"
                    },
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "comment": {
                      "text": "(optional) old value of requesting property"
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.requestUpdate"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.requestUpdate",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.requestUpdate"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.requestUpdate"
            }
          },
          {
            "name": "requestUpdateInternal",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "This protected version of `requestUpdate` does not access or return the\n`updateComplete` promise. This promise can be overridden and is therefore\nnot free to access."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 661,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "requestUpdateInternal",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.requestUpdateInternal"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.requestUpdateInternal",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.requestUpdateInternal"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.requestUpdateInternal"
            }
          },
          {
            "name": "shouldUpdate",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Controls whether or not `update` should be called when the element requests\nan update. By default, this method always returns `true`, but this can be\ncustomized to control when to update."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 869,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "shouldUpdate",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.shouldUpdate"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.shouldUpdate",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.shouldUpdate"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.shouldUpdate"
            }
          },
          {
            "name": "update",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Updates the element. This method reflects property values to attributes\nand calls `render` to render DOM via lit-html. Setting properties inside\nthis method will *not* trigger another update."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 296,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "update",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "changedProperties",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "overwrites": {
                  "type": "reference",
                  "name": "UpdatingElement.update"
                }
              }
            ],
            "overwrites": {
              "type": "reference",
              "name": "UpdatingElement.update",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.update"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.update"
            }
          },
          {
            "name": "updated",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Invoked whenever the element is updated. Implement to perform\npost-updating tasks via DOM APIs, for example, focusing an element.",
              "text": "Setting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 902,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "updated",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.updated"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.updated",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.updated"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.updated"
            }
          },
          {
            "name": "createProperty",
            "kindString": "Method",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Creates a property accessor on the element prototype if one does not exist\nand stores a PropertyDeclaration for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.",
              "text": "This method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 314,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "createProperty",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    },
                    "defaultValue": "..."
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.createProperty"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.createProperty",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.createProperty"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.createProperty"
            }
          },
          {
            "name": "finalize",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Creates property accessors for registered properties and ensures\nany superclasses are also finalized."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 402,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "finalize",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.finalize"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.finalize",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.finalize"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.finalize"
            }
          },
          {
            "name": "getPropertyDescriptor",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,",
              "text": "  class MyElement extends LitElement {\n    static getPropertyDescriptor(name, key, options) {\n      const defaultDescriptor =\n          super.getPropertyDescriptor(name, key, options);\n      const setter = defaultDescriptor.set;\n      return {\n        get: defaultDescriptor.get,\n        set(value) {\n          setter.call(this, value);\n          // custom action.\n        },\n        configurable: true,\n        enumerable: true\n      }\n    }\n  }\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 361,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getPropertyDescriptor",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "key",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        {
                          "type": "intrinsic",
                          "name": "symbol"
                        }
                      ]
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    }
                  }
                ],
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "name": "__type",
                    "kindString": "Type literal",
                    "children": [
                      {
                        "name": "configurable",
                        "kindString": "Property",
                        "type": {
                          "type": "intrinsic",
                          "name": "boolean"
                        },
                        "defaultValue": "true"
                      },
                      {
                        "name": "enumerable",
                        "kindString": "Property",
                        "type": {
                          "type": "intrinsic",
                          "name": "boolean"
                        },
                        "defaultValue": "true"
                      },
                      {
                        "name": "get",
                        "kindString": "Method",
                        "sources": [
                          {
                            "fileName": "lit-dev-api/api-data/lit-element-2/repo/src/lib/updating-element.ts",
                            "line": 365
                          }
                        ],
                        "signatures": [
                          {
                            "name": "get",
                            "kindString": "Call signature",
                            "type": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        ]
                      },
                      {
                        "name": "set",
                        "kindString": "Method",
                        "sources": [
                          {
                            "fileName": "lit-dev-api/api-data/lit-element-2/repo/src/lib/updating-element.ts",
                            "line": 368
                          }
                        ],
                        "signatures": [
                          {
                            "name": "set",
                            "kindString": "Call signature",
                            "parameters": [
                              {
                                "name": "value",
                                "kindString": "Parameter",
                                "type": {
                                  "type": "intrinsic",
                                  "name": "unknown"
                                }
                              }
                            ],
                            "type": {
                              "type": "intrinsic",
                              "name": "void"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.getPropertyDescriptor"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.getPropertyDescriptor",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.getPropertyDescriptor"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.getPropertyDescriptor"
            }
          },
          {
            "name": "getPropertyOptions",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns the property options associated with the given property.\nThese options are defined with a PropertyDeclaration via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.",
              "text": "Note, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override `createProperty`.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 392,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getPropertyOptions",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    },
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "PropertyDeclaration",
                  "location": {
                    "page": "UpdatingElement",
                    "anchor": "PropertyDeclaration"
                  }
                },
                "inheritedFrom": {
                  "type": "reference",
                  "name": "UpdatingElement.getPropertyOptions"
                }
              }
            ],
            "inheritedFrom": {
              "type": "reference",
              "name": "UpdatingElement.getPropertyOptions",
              "location": {
                "page": "UpdatingElement",
                "anchor": "UpdatingElement.getPropertyOptions"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.getPropertyOptions"
            }
          },
          {
            "name": "getStyles",
            "kindString": "Method",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Return the array of styles to apply to the element.\nOverride this method to integrate into a style management system."
            },
            "sources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 149,
                "moduleSpecifier": "lit-element"
              }
            ],
            "signatures": [
              {
                "name": "getStyles",
                "kindString": "Call signature",
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "reference",
                      "name": "CSSResultGroup",
                      "location": {
                        "page": "styles",
                        "anchor": "CSSResultGroup"
                      }
                    }
                  ]
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "LitElement",
              "anchor": "LitElement.getStyles"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 101,
            "moduleSpecifier": "lit-element"
          }
        ],
        "extendedTypes": [
          {
            "type": "reference",
            "name": "UpdatingElement",
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "LitElement",
          "anchor": "LitElement"
        },
        "heritage": [
          {
            "type": "reference",
            "name": "UpdatingElement",
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement"
            }
          },
          {
            "type": "reference",
            "name": "HTMLElement",
            "externalLocation": {
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
            }
          }
        ]
      }
    ]
  },
  {
    "slug": "UpdatingElement",
    "title": "UpdatingElement",
    "versionLinks": {
      "v2": "api/ReactiveElement/"
    },
    "repo": "lit/lit-element",
    "commit": "c9b40e6b26dd7a9361e32421a4343949d242e0ca",
    "items": [
      {
        "name": "defaultConverter",
        "kindString": "Variable",
        "flags": {
          "isConst": true
        },
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 145,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "type": {
          "type": "reference",
          "name": "ComplexAttributeConverter",
          "location": {
            "page": "UpdatingElement",
            "anchor": "ComplexAttributeConverter"
          }
        },
        "defaultValue": "...",
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "defaultConverter"
        }
      },
      {
        "name": "notEqual",
        "kindString": "Function",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Change function that returns true if `value` is different from `oldValue`.\nThis method is used as the default for a property's `hasChanged` function."
        },
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 184,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "signatures": [
          {
            "name": "notEqual",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "value",
                "kindString": "Parameter",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              },
              {
                "name": "old",
                "kindString": "Parameter",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "notEqual"
        }
      },
      {
        "name": "UpdatingElement",
        "kindString": "Class",
        "flags": {
          "isAbstract": true
        },
        "comment": {
          "shortText": "Base element class which manages element properties and attributes. When\nproperties change, the `update` method is asynchronously called. This method\nshould be supplied by subclassers to render updates as desired."
        },
        "children": [
          {
            "name": "constructor",
            "kindString": "Constructor",
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 514,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "new UpdatingElement",
                "kindString": "Constructor signature",
                "type": {
                  "type": "reference",
                  "name": "UpdatingElement",
                  "location": {
                    "page": "UpdatingElement",
                    "anchor": "UpdatingElement"
                  }
                },
                "overwrites": {
                  "type": "reference",
                  "name": "HTMLElement.constructor"
                }
              }
            ],
            "overwrites": {
              "type": "reference",
              "name": "HTMLElement.constructor"
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.constructor"
            }
          },
          {
            "name": "finalized",
            "kindString": "Property",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Marks class as having finished creating properties."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 236,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "defaultValue": "true",
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.finalized"
            }
          },
          {
            "name": "properties",
            "kindString": "Property",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "User-supplied object that maps property names to `PropertyDeclaration`\nobjects containing options for configuring the property."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 248,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "name": "PropertyDeclarations",
              "location": {
                "page": "UpdatingElement",
                "anchor": "PropertyDeclarations"
              }
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.properties"
            }
          },
          {
            "name": "hasUpdated",
            "kindString": "Accessor",
            "flags": {
              "isProtected": true
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 739,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "getSignature": [
              {
                "name": "hasUpdated",
                "kindString": "Get signature",
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.hasUpdated"
            }
          },
          {
            "name": "updateComplete",
            "kindString": "Accessor",
            "comment": {
              "shortText": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.",
              "text": "To await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.\n",
              "returns": "The Promise returns a boolean that indicates if the\nupdate resolved without triggering another update.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 816,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              ],
              "name": "Promise"
            },
            "getSignature": [
              {
                "name": "updateComplete",
                "kindString": "Get signature",
                "comment": {
                  "shortText": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.",
                  "text": "To await additional asynchronous work, override the `_getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super._getUpdateComplete()`, then any subsequent state.\n",
                  "returns": "The Promise returns a boolean that indicates if the\nupdate resolved without triggering another update.\n"
                },
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.updateComplete"
            }
          },
          {
            "name": "observedAttributes",
            "kindString": "Accessor",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns a list of attributes corresponding to the registered properties."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 254,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "intrinsic",
                "name": "string"
              }
            },
            "getSignature": [
              {
                "name": "observedAttributes",
                "kindString": "Get signature",
                "comment": {
                  "shortText": "Returns a list of attributes corresponding to the registered properties."
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.observedAttributes"
            }
          },
          {
            "name": "attributeChangedCallback",
            "kindString": "Method",
            "comment": {
              "shortText": "Synchronizes property values when attributes change."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 597,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "attributeChangedCallback",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  },
                  {
                    "name": "old",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "literal",
                          "value": null
                        },
                        {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "literal",
                          "value": null
                        },
                        {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.attributeChangedCallback"
            }
          },
          {
            "name": "connectedCallback",
            "kindString": "Method",
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 573,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "connectedCallback",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.connectedCallback"
            }
          },
          {
            "name": "disconnectedCallback",
            "kindString": "Method",
            "comment": {
              "shortText": "Allows for `super.disconnectedCallback()` in extensions while\nreserving the possibility of making non-breaking feature additions\nwhen disconnecting at some point in the future."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 591,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "disconnectedCallback",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.disconnectedCallback"
            }
          },
          {
            "name": "enableUpdating",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 579,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "enableUpdating",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.enableUpdating"
            }
          },
          {
            "name": "firstUpdated",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.",
              "text": "Setting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 914,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "firstUpdated",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.firstUpdated"
            }
          },
          {
            "name": "getUpdateComplete",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Override point for the `updateComplete` promise.",
              "text": "It is not safe to override the `updateComplete` getter directly due to a\nlimitation in TypeScript which means it is not possible to call a\nsuperclass getter (e.g. `super.updateComplete.then(...)`) when the target\nlanguage is ES5 (https://github.com/microsoft/TypeScript/issues/338).\nThis method should be overridden instead. For example:\n\n  class MyElement extends LitElement {\n    async getUpdateComplete() {\n      await super.getUpdateComplete();\n      await this._myChild.updateComplete;\n    }\n  }\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 858,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getUpdateComplete",
                "kindString": "Call signature",
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.getUpdateComplete"
            }
          },
          {
            "name": "initialize",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Performs element initialization. By default captures any pre-set values for\nregistered properties."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 523,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "initialize",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.initialize"
            }
          },
          {
            "name": "performUpdate",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Performs an element update. Note, if an exception is thrown during the\nupdate, `firstUpdated` and `updated` will not be called.",
              "text": "You can override this method to change the timing of updates. If this\nmethod is overridden, `super.performUpdate()` must be called.\n\nFor instance, to schedule updates to occur just before the next frame:\n\n```\nprotected async performUpdate(): Promise<unknown> {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 759,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "performUpdate",
                "kindString": "Call signature",
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "void"
                    },
                    {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Promise"
                    }
                  ]
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.performUpdate"
            }
          },
          {
            "name": "requestUpdate",
            "kindString": "Method",
            "comment": {
              "shortText": "Requests an update which is processed asynchronously. This should\nbe called when an element should update based on some state not triggered\nby setting a property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored. Returns the `updateComplete` Promise which is resolved\nwhen the update completes.",
              "returns": "A Promise that is resolved when the update completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 707,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "requestUpdate",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "comment": {
                      "text": "(optional) name of requesting property"
                    },
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "comment": {
                      "text": "(optional) old value of requesting property"
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "Promise"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.requestUpdate"
            }
          },
          {
            "name": "requestUpdateInternal",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "This protected version of `requestUpdate` does not access or return the\n`updateComplete` promise. This promise can be overridden and is therefore\nnot free to access."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 661,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "requestUpdateInternal",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.requestUpdateInternal"
            }
          },
          {
            "name": "shouldUpdate",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Controls whether or not `update` should be called when the element requests\nan update. By default, this method always returns `true`, but this can be\ncustomized to control when to update."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 869,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "shouldUpdate",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.shouldUpdate"
            }
          },
          {
            "name": "update",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Updates the element. This method reflects property values to attributes.\nIt can be overridden to render and keep updated element DOM.\nSetting properties inside this method will *not* trigger\nanother update."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 881,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "update",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.update"
            }
          },
          {
            "name": "updated",
            "kindString": "Method",
            "flags": {
              "isProtected": true
            },
            "comment": {
              "shortText": "Invoked whenever the element is updated. Implement to perform\npost-updating tasks via DOM APIs, for example, focusing an element.",
              "text": "Setting properties inside this method will trigger the element to update\nagain after this update cycle completes.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 902,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "updated",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "_changedProperties",
                    "kindString": "Parameter",
                    "comment": {
                      "text": "Map of changed properties with old values\n"
                    },
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "union",
                          "types": [
                            {
                              "type": "intrinsic",
                              "name": "string"
                            },
                            {
                              "type": "intrinsic",
                              "name": "number"
                            },
                            {
                              "type": "intrinsic",
                              "name": "symbol"
                            }
                          ]
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "Map"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.updated"
            }
          },
          {
            "name": "createProperty",
            "kindString": "Method",
            "flags": {
              "isStatic": true
            },
            "comment": {
              "shortText": "Creates a property accessor on the element prototype if one does not exist\nand stores a PropertyDeclaration for the property with the given options.\nThe property setter calls the property's `hasChanged` property option\nor uses a strict identity check to determine whether or not to request\nan update.",
              "text": "This method may be overridden to customize properties; however,\nwhen doing so, it's important to call `super.createProperty` to ensure\nthe property is setup correctly. This method calls\n`getPropertyDescriptor` internally to get a descriptor to install.\nTo customize what properties do when they are get or set, override\n`getPropertyDescriptor`. To customize the options for a property,\nimplement `createProperty` like this:\n\nstatic createProperty(name, options) {\n  options = Object.assign(options, {myOption: true});\n  super.createProperty(name, options);\n}\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 314,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "createProperty",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    },
                    "defaultValue": "..."
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.createProperty"
            }
          },
          {
            "name": "finalize",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Creates property accessors for registered properties and ensures\nany superclasses are also finalized."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 402,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "finalize",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.finalize"
            }
          },
          {
            "name": "getPropertyDescriptor",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns a property descriptor to be defined on the given named property.\nIf no descriptor is returned, the property will not become an accessor.\nFor example,",
              "text": "  class MyElement extends LitElement {\n    static getPropertyDescriptor(name, key, options) {\n      const defaultDescriptor =\n          super.getPropertyDescriptor(name, key, options);\n      const setter = defaultDescriptor.set;\n      return {\n        get: defaultDescriptor.get,\n        set(value) {\n          setter.call(this, value);\n          // custom action.\n        },\n        configurable: true,\n        enumerable: true\n      }\n    }\n  }\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 361,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getPropertyDescriptor",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  },
                  {
                    "name": "key",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        {
                          "type": "intrinsic",
                          "name": "symbol"
                        }
                      ]
                    }
                  },
                  {
                    "name": "options",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "typeArguments": [
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        },
                        {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      ],
                      "name": "PropertyDeclaration",
                      "location": {
                        "page": "UpdatingElement",
                        "anchor": "PropertyDeclaration"
                      }
                    }
                  }
                ],
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "name": "__type",
                    "kindString": "Type literal",
                    "children": [
                      {
                        "name": "configurable",
                        "kindString": "Property",
                        "type": {
                          "type": "intrinsic",
                          "name": "boolean"
                        },
                        "defaultValue": "true"
                      },
                      {
                        "name": "enumerable",
                        "kindString": "Property",
                        "type": {
                          "type": "intrinsic",
                          "name": "boolean"
                        },
                        "defaultValue": "true"
                      },
                      {
                        "name": "get",
                        "kindString": "Method",
                        "sources": [
                          {
                            "fileName": "lit-dev-api/api-data/lit-element-2/repo/src/lib/updating-element.ts",
                            "line": 365
                          }
                        ],
                        "signatures": [
                          {
                            "name": "get",
                            "kindString": "Call signature",
                            "type": {
                              "type": "intrinsic",
                              "name": "any"
                            }
                          }
                        ]
                      },
                      {
                        "name": "set",
                        "kindString": "Method",
                        "sources": [
                          {
                            "fileName": "lit-dev-api/api-data/lit-element-2/repo/src/lib/updating-element.ts",
                            "line": 368
                          }
                        ],
                        "signatures": [
                          {
                            "name": "set",
                            "kindString": "Call signature",
                            "parameters": [
                              {
                                "name": "value",
                                "kindString": "Parameter",
                                "type": {
                                  "type": "intrinsic",
                                  "name": "unknown"
                                }
                              }
                            ],
                            "type": {
                              "type": "intrinsic",
                              "name": "void"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.getPropertyDescriptor"
            }
          },
          {
            "name": "getPropertyOptions",
            "kindString": "Method",
            "flags": {
              "isProtected": true,
              "isStatic": true
            },
            "comment": {
              "shortText": "Returns the property options associated with the given property.\nThese options are defined with a PropertyDeclaration via the `properties`\nobject or the `@property` decorator and are registered in\n`createProperty(...)`.",
              "text": "Note, this method should be considered \"final\" and not overridden. To\ncustomize the options for a given property, override `createProperty`.\n"
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 392,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "signatures": [
              {
                "name": "getPropertyOptions",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "name",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "PropertyKey"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    },
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "PropertyDeclaration",
                  "location": {
                    "page": "UpdatingElement",
                    "anchor": "PropertyDeclaration"
                  }
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "UpdatingElement.getPropertyOptions"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 219,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "extendedTypes": [
          {
            "type": "reference",
            "name": "HTMLElement",
            "externalLocation": {
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
            }
          }
        ],
        "extendedBy": [
          {
            "type": "reference",
            "name": "LitElement",
            "location": {
              "page": "LitElement",
              "anchor": "LitElement"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "UpdatingElement"
        },
        "heritage": [
          {
            "type": "reference",
            "name": "HTMLElement",
            "externalLocation": {
              "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
            }
          }
        ]
      },
      {
        "name": "ComplexAttributeConverter",
        "kindString": "Interface",
        "comment": {
          "shortText": "Converts property values to and from attribute values."
        },
        "children": [
          {
            "name": "fromAttribute",
            "kindString": "Method",
            "flags": {
              "isOptional": true
            },
            "comment": {
              "shortText": "Function called to convert an attribute value to a property\nvalue."
            },
            "signatures": [
              {
                "name": "fromAttribute",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "union",
                      "types": [
                        {
                          "type": "literal",
                          "value": null
                        },
                        {
                          "type": "intrinsic",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  {
                    "name": "type",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "name": "TypeHint"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "name": "Type"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "ComplexAttributeConverter.fromAttribute"
            }
          },
          {
            "name": "toAttribute",
            "kindString": "Method",
            "flags": {
              "isOptional": true
            },
            "comment": {
              "shortText": "Function called to convert a property value to an attribute\nvalue.",
              "text": "It returns unknown instead of string, to be compatible with\nhttps://github.com/WICG/trusted-types (and similar efforts).\n"
            },
            "signatures": [
              {
                "name": "toAttribute",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "Type"
                    }
                  },
                  {
                    "name": "type",
                    "kindString": "Parameter",
                    "flags": {
                      "isOptional": true
                    },
                    "type": {
                      "type": "reference",
                      "name": "TypeHint"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "ComplexAttributeConverter.toAttribute"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 42,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "typeParameter": [
          {
            "name": "Type",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "unknown"
            }
          },
          {
            "name": "TypeHint",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "unknown"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "ComplexAttributeConverter"
        }
      },
      {
        "name": "HasChanged",
        "kindString": "Interface",
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 176,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "signatures": [
          {
            "name": "HasChanged",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "value",
                "kindString": "Parameter",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              },
              {
                "name": "old",
                "kindString": "Parameter",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "HasChanged"
        }
      },
      {
        "name": "PropertyDeclaration",
        "kindString": "Interface",
        "comment": {
          "shortText": "Defines options for a property accessor."
        },
        "children": [
          {
            "name": "attribute",
            "kindString": "Property",
            "flags": {
              "isOptional": true,
              "isReadonly": true
            },
            "comment": {
              "shortText": "Indicates how and whether the property becomes an observed attribute.\nIf the value is `false`, the property is not added to `observedAttributes`.\nIf true or absent, the lowercased property name is observed (e.g. `fooBar`\nbecomes `foobar`). If a string, the string value is observed (e.g\n`attribute: 'foo-bar'`)."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 74,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "intrinsic",
                  "name": "string"
                },
                {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              ]
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.attribute"
            }
          },
          {
            "name": "converter",
            "kindString": "Property",
            "flags": {
              "isOptional": true,
              "isReadonly": true
            },
            "comment": {
              "shortText": "Indicates how to convert the attribute to/from a property. If this value\nis a function, it is used to convert the attribute value a the property\nvalue. If it's an object, it can have keys for `fromAttribute` and\n`toAttribute`. If no `toAttribute` function is provided and\n`reflect` is set to `true`, the property value is set directly to the\nattribute. A default `converter` is used if none is provided; it supports\n`Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\nwhen a property changes and the converter is used to update the attribute,\nthe property is never updated again as a result of the attribute changing,\nand vice versa."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 95,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "name": "Type"
                },
                {
                  "type": "reference",
                  "name": "TypeHint"
                }
              ],
              "name": "AttributeConverter"
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.converter"
            }
          },
          {
            "name": "noAccessor",
            "kindString": "Property",
            "flags": {
              "isOptional": true,
              "isReadonly": true
            },
            "comment": {
              "shortText": "Indicates whether an accessor will be created for this property. By\ndefault, an accessor will be generated for this property that requests an\nupdate when set. If this flag is `true`, no accessor will be created, and\nit will be the user's responsibility to call\n`this.requestUpdate(propertyName, oldValue)` to request an update when\nthe property changes."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 121,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.noAccessor"
            }
          },
          {
            "name": "reflect",
            "kindString": "Property",
            "flags": {
              "isOptional": true,
              "isReadonly": true
            },
            "comment": {
              "shortText": "Indicates if the property should reflect to an attribute.\nIf `true`, when the property is set, the attribute is set using the\nattribute name determined according to the rules for the `attribute`\nproperty option and the value of the property converted using the rules\nfrom the `converter` property option."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 104,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.reflect"
            }
          },
          {
            "name": "type",
            "kindString": "Property",
            "flags": {
              "isOptional": true,
              "isReadonly": true
            },
            "comment": {
              "shortText": "Indicates the type of the property. This is used only as a hint for the\n`converter` to determine how to convert the attribute\nto/from a property."
            },
            "sources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 81,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "type": {
              "type": "reference",
              "name": "TypeHint"
            },
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.type"
            }
          },
          {
            "name": "hasChanged",
            "kindString": "Method",
            "flags": {
              "isOptional": true
            },
            "comment": {
              "shortText": "A function that indicates if a property should be considered changed when\nit is set. The function should take the `newValue` and `oldValue` and\nreturn `true` if an update should be requested."
            },
            "signatures": [
              {
                "name": "hasChanged",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "Type"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "Type"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lib/updating-element.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/updating-element.js"
              }
            ],
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration.hasChanged"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 66,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "typeParameter": [
          {
            "name": "Type",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "unknown"
            }
          },
          {
            "name": "TypeHint",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "unknown"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "PropertyDeclaration"
        }
      },
      {
        "name": "PropertyDeclarations",
        "kindString": "Interface",
        "comment": {
          "shortText": "Map of properties to PropertyDeclaration options. For each property an\naccessor is made, and the property is processed according to the\nPropertyDeclaration options."
        },
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 129,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "indexSignature": {
          "name": "__index",
          "kindString": "Index signature",
          "parameters": [
            {
              "name": "key",
              "type": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          ],
          "type": {
            "type": "reference",
            "name": "PropertyDeclaration",
            "location": {
              "page": "UpdatingElement",
              "anchor": "PropertyDeclaration"
            }
          }
        },
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "PropertyDeclarations"
        }
      },
      {
        "name": "PropertyValues",
        "kindString": "Type alias",
        "comment": {
          "shortText": "Map of changed properties with old values. Takes an optional generic\ninterface corresponding to the declared element properties."
        },
        "sources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 142,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "typeParameter": [
          {
            "name": "T",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "any"
            }
          }
        ],
        "type": {
          "type": "conditional",
          "checkType": {
            "type": "typeOperator",
            "operator": "keyof",
            "target": {
              "type": "reference",
              "name": "T"
            }
          },
          "extendsType": {
            "type": "reference",
            "name": "PropertyKey"
          },
          "trueType": {
            "type": "reference",
            "typeArguments": [
              {
                "type": "typeOperator",
                "operator": "keyof",
                "target": {
                  "type": "reference",
                  "name": "T"
                }
              },
              {
                "type": "intrinsic",
                "name": "unknown"
              }
            ],
            "name": "Map"
          },
          "falseType": {
            "type": "intrinsic",
            "name": "never"
          }
        },
        "entrypointSources": [
          {
            "fileName": "src/lib/updating-element.ts",
            "line": 27,
            "moduleSpecifier": "lit-element/lib/updating-element.js"
          }
        ],
        "location": {
          "page": "UpdatingElement",
          "anchor": "PropertyValues"
        }
      }
    ]
  },
  {
    "slug": "styles",
    "title": "Styles",
    "versionLinks": {
      "v2": "api/styles/"
    },
    "repo": "lit/lit-element",
    "commit": "c9b40e6b26dd7a9361e32421a4343949d242e0ca",
    "items": [
      {
        "name": "css",
        "kindString": "Function",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Template tag which which can be used with LitElement's [`styles`](/docs/v1/api/lit-element/LitElement/#LitElement.styles) property to set element styles. For security reasons, only literal\nstring values may be used. To incorporate non-literal values [`unsafeCSS`](/docs/v1/api/lit-element/styles/#unsafeCSS)\nmay be used inside a template string part."
        },
        "sources": [
          {
            "fileName": "src/lib/css-tag.ts",
            "line": 87,
            "moduleSpecifier": "lit-element/lib/css-tag.js"
          }
        ],
        "signatures": [
          {
            "name": "css",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "strings",
                "kindString": "Parameter",
                "type": {
                  "type": "reference",
                  "name": "TemplateStringsArray"
                }
              },
              {
                "name": "values",
                "kindString": "Parameter",
                "flags": {
                  "isRest": true
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "name": "CSSResult",
                        "location": {
                          "page": "styles",
                          "anchor": "CSSResult"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "reference",
              "name": "CSSResult",
              "location": {
                "page": "styles",
                "anchor": "CSSResult"
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "css"
        }
      },
      {
        "name": "CSSResult",
        "kindString": "Class",
        "children": [
          {
            "name": "constructor",
            "kindString": "Constructor",
            "sources": [
              {
                "fileName": "src/lib/css-tag.ts",
                "line": 27,
                "moduleSpecifier": "lit-element/lib/css-tag.js"
              }
            ],
            "signatures": [
              {
                "name": "new CSSResult",
                "kindString": "Constructor signature",
                "parameters": [
                  {
                    "name": "cssText",
                    "kindString": "Parameter",
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  },
                  {
                    "name": "safeToken",
                    "kindString": "Parameter",
                    "type": {
                      "type": "intrinsic",
                      "name": "symbol"
                    }
                  }
                ],
                "type": {
                  "type": "reference",
                  "name": "CSSResult",
                  "location": {
                    "page": "styles",
                    "anchor": "CSSResult"
                  }
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "styles",
              "anchor": "CSSResult.constructor"
            }
          },
          {
            "name": "cssText",
            "kindString": "Property",
            "flags": {
              "isReadonly": true
            },
            "sources": [
              {
                "fileName": "src/lib/css-tag.ts",
                "line": 25,
                "moduleSpecifier": "lit-element/lib/css-tag.js"
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "string"
            },
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "styles",
              "anchor": "CSSResult.cssText"
            }
          },
          {
            "name": "styleSheet",
            "kindString": "Accessor",
            "sources": [
              {
                "fileName": "src/lib/css-tag.ts",
                "line": 38,
                "moduleSpecifier": "lit-element/lib/css-tag.js"
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "name": "CSSStyleSheet",
                  "externalLocation": {
                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"
                  }
                }
              ]
            },
            "getSignature": [
              {
                "name": "styleSheet",
                "kindString": "Get signature",
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "reference",
                      "name": "CSSStyleSheet",
                      "externalLocation": {
                        "url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"
                      }
                    }
                  ]
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "styles",
              "anchor": "CSSResult.styleSheet"
            }
          },
          {
            "name": "toString",
            "kindString": "Method",
            "sources": [
              {
                "fileName": "src/lib/css-tag.ts",
                "line": 52,
                "moduleSpecifier": "lit-element/lib/css-tag.js"
              }
            ],
            "signatures": [
              {
                "name": "toString",
                "kindString": "Call signature",
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "styles",
              "anchor": "CSSResult.toString"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lib/css-tag.ts",
            "line": 22,
            "moduleSpecifier": "lit-element/lib/css-tag.js"
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "CSSResult"
        }
      },
      {
        "name": "supportsAdoptingStyleSheets",
        "kindString": "Variable",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Whether the current browser supports `adoptedStyleSheets`."
        },
        "sources": [
          {
            "fileName": "src/lib/css-tag.ts",
            "line": 15,
            "moduleSpecifier": "lit-element/lib/css-tag.js"
          }
        ],
        "type": {
          "type": "intrinsic",
          "name": "boolean"
        },
        "defaultValue": "...",
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "supportsAdoptingStyleSheets"
        }
      },
      {
        "name": "unsafeCSS",
        "kindString": "Function",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Wrap a value for interpolation in a [`css`](/docs/v1/api/lit-element/styles/#css) tagged template literal.",
          "text": "This is unsafe because untrusted CSS text can be used to phone home\nor exfiltrate data to an attacker controlled site. Take care to only use\nthis with trusted input.\n"
        },
        "sources": [
          {
            "fileName": "src/lib/css-tag.ts",
            "line": 64,
            "moduleSpecifier": "lit-element/lib/css-tag.js"
          }
        ],
        "signatures": [
          {
            "name": "unsafeCSS",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "value",
                "kindString": "Parameter",
                "type": {
                  "type": "intrinsic",
                  "name": "unknown"
                }
              }
            ],
            "type": {
              "type": "reference",
              "name": "CSSResult",
              "location": {
                "page": "styles",
                "anchor": "CSSResult"
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "unsafeCSS"
        }
      },
      {
        "name": "CSSResultArray",
        "kindString": "Interface",
        "sources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 82,
            "moduleSpecifier": "lit-element"
          }
        ],
        "extendedTypes": [
          {
            "type": "reference",
            "typeArguments": [
              {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "CSSResultOrNative",
                    "location": {
                      "page": "styles",
                      "anchor": "CSSResultOrNative"
                    }
                  },
                  {
                    "type": "reference",
                    "name": "CSSResultArray",
                    "location": {
                      "page": "styles",
                      "anchor": "CSSResultArray"
                    }
                  }
                ]
              }
            ],
            "name": "Array"
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "CSSResultArray"
        },
        "heritage": [
          {
            "type": "reference",
            "typeArguments": [
              {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "name": "CSSResultOrNative",
                    "location": {
                      "page": "styles",
                      "anchor": "CSSResultOrNative"
                    }
                  },
                  {
                    "type": "reference",
                    "name": "CSSResultArray",
                    "location": {
                      "page": "styles",
                      "anchor": "CSSResultArray"
                    }
                  }
                ]
              }
            ],
            "name": "Array"
          }
        ]
      },
      {
        "name": "CSSResultGroup",
        "kindString": "Type alias",
        "sources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 85,
            "moduleSpecifier": "lit-element"
          }
        ],
        "type": {
          "type": "union",
          "types": [
            {
              "type": "reference",
              "name": "CSSResultOrNative",
              "location": {
                "page": "styles",
                "anchor": "CSSResultOrNative"
              }
            },
            {
              "type": "reference",
              "name": "CSSResultArray",
              "location": {
                "page": "styles",
                "anchor": "CSSResultArray"
              }
            }
          ]
        },
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "CSSResultGroup"
        }
      },
      {
        "name": "CSSResultOrNative",
        "kindString": "Type alias",
        "sources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 80,
            "moduleSpecifier": "lit-element"
          }
        ],
        "type": {
          "type": "union",
          "types": [
            {
              "type": "reference",
              "name": "CSSResult",
              "location": {
                "page": "styles",
                "anchor": "CSSResult"
              }
            },
            {
              "type": "reference",
              "name": "CSSStyleSheet",
              "externalLocation": {
                "url": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"
              }
            }
          ]
        },
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "styles",
          "anchor": "CSSResultOrNative"
        }
      }
    ]
  },
  {
    "slug": "decorators",
    "title": "Decorators",
    "versionLinks": {
      "v2": "api/decorators/"
    },
    "repo": "lit/lit-element",
    "commit": "c9b40e6b26dd7a9361e32421a4343949d242e0ca",
    "items": [
      {
        "name": "customElement",
        "kindString": "Function",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Class decorator factory that defines the decorated class as a custom element.",
          "text": "```\n@customElement('my-element')\nclass MyElement {\n  render() {\n    return html``;\n  }\n}\n```"
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 88,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "customElement",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "tagName",
                "kindString": "Parameter",
                "comment": {
                  "text": "The name of the custom element to define.\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "classOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "typeArguments": [
                                {
                                  "type": "reference",
                                  "name": "HTMLElement",
                                  "externalLocation": {
                                    "url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
                                  }
                                }
                              ],
                              "name": "Constructor",
                              "location": {
                                "page": "decorators",
                                "anchor": "Constructor"
                              }
                            },
                            {
                              "type": "reference",
                              "name": "ClassDescriptor"
                            }
                          ]
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "customElement"
        }
      },
      {
        "name": "eventOptions",
        "kindString": "Function",
        "comment": {
          "shortText": "Adds event listener options to a method used as an event listener in a\nlit-html template."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 422,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "eventOptions",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "options",
                "kindString": "Parameter",
                "comment": {
                  "text": "An object that specifies event listener options as accepted by\n`EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n\nCurrent browsers support the `capture`, `passive`, and `once` options. See:\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n"
                },
                "type": {
                  "type": "reference",
                  "name": "AddEventListenerOptions"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "any"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "eventOptions"
        }
      },
      {
        "name": "internalProperty",
        "kindString": "Function",
        "comment": {
          "shortText": "Declares a private or protected property that still triggers updates to the\nelement when it changes.",
          "text": "Properties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like the Closure Compiler."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 189,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "internalProperty",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "options",
                "kindString": "Parameter",
                "flags": {
                  "isOptional": true
                },
                "type": {
                  "type": "reference",
                  "name": "InternalPropertyDeclaration",
                  "location": {
                    "page": "decorators",
                    "anchor": "InternalPropertyDeclaration"
                  }
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "internalProperty"
        }
      },
      {
        "name": "property",
        "kindString": "Function",
        "comment": {
          "shortText": "A property decorator which creates a LitElement property which reflects a\ncorresponding attribute value. A [`PropertyDeclaration`](/docs/v1/api/lit-element/UpdatingElement/#PropertyDeclaration) may optionally be\nsupplied to configure property features.",
          "text": "This decorator should only be used for public fields. Private or protected\nfields should use the [`internalProperty`](/docs/v1/api/lit-element/decorators/#internalProperty) decorator.\n"
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 161,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "property",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "options",
                "kindString": "Parameter",
                "flags": {
                  "isOptional": true
                },
                "type": {
                  "type": "reference",
                  "name": "PropertyDeclaration",
                  "location": {
                    "page": "UpdatingElement",
                    "anchor": "PropertyDeclaration"
                  }
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "property"
        }
      },
      {
        "name": "query",
        "kindString": "Function",
        "comment": {
          "shortText": "A property decorator that converts a class property into a getter that\nexecutes a querySelector on the element's renderRoot."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 232,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "query",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "selector",
                "kindString": "Parameter",
                "comment": {
                  "text": "A DOMString containing one or more selectors to match."
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              },
              {
                "name": "cache",
                "kindString": "Parameter",
                "flags": {
                  "isOptional": true
                },
                "comment": {
                  "text": "An optional boolean which when true performs the DOM query only\nonce and caches the result.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "query"
        }
      },
      {
        "name": "queryAll",
        "kindString": "Function",
        "comment": {
          "shortText": "A property decorator that converts a class property into a getter\nthat executes a querySelectorAll on the element's renderRoot."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 344,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "queryAll",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "selector",
                "kindString": "Parameter",
                "comment": {
                  "text": "A DOMString containing one or more selectors to match.\n\nSee:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "queryAll"
        }
      },
      {
        "name": "queryAssignedNodes",
        "kindString": "Function",
        "comment": {
          "shortText": "A property decorator that converts a class property into a getter that\nreturns the `assignedNodes` of the given named `slot`. Note, the type of\nthis property should be annotated as `NodeListOf<HTMLElement>`."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 470,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "queryAssignedNodes",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "slotName",
                "kindString": "Parameter",
                "comment": {
                  "text": "A string name of the slot."
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                },
                "defaultValue": "''"
              },
              {
                "name": "flatten",
                "kindString": "Parameter",
                "comment": {
                  "text": "A boolean which when true flattens the assigned nodes,\nmeaning any assigned nodes that are slot elements are replaced with their\nassigned nodes."
                },
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                },
                "defaultValue": "false"
              },
              {
                "name": "selector",
                "kindString": "Parameter",
                "comment": {
                  "text": "A string which filters the results to elements that match\nthe given css selector.\n\n* @example\n```ts\nclass MyElement {\n  @queryAssignedNodes('list', true, '.item')\n  listItems;\n\n  render() {\n    return html`\n      <slot name=\"list\"></slot>\n    `;\n  }\n}\n```"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                },
                "defaultValue": "''"
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "queryAssignedNodes"
        }
      },
      {
        "name": "queryAsync",
        "kindString": "Function",
        "comment": {
          "shortText": "A property decorator that converts a class property into a getter that\nreturns a promise that resolves to the result of a querySelector on the\nelement's renderRoot done after the element's `updateComplete` promise\nresolves. When the queried property may change with element state, this\ndecorator can be used instead of requiring users to await the\n`updateComplete` before accessing the property."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 301,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "queryAsync",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "selector",
                "kindString": "Parameter",
                "comment": {
                  "text": "A DOMString containing one or more selectors to match.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "queryAsync"
        }
      },
      {
        "name": "state",
        "kindString": "Function",
        "flags": {
          "isConst": true
        },
        "comment": {
          "shortText": "Declares a private or protected property that still triggers updates to the\nelement when it changes.",
          "text": "Properties declared this way must not be used from HTML or HTML templating\nsystems, they're solely for properties internal to the element. These\nproperties may be renamed by optimization tools like the Closure Compiler."
        },
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 202,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "signatures": [
          {
            "name": "state",
            "kindString": "Call signature",
            "parameters": [
              {
                "name": "options",
                "kindString": "Parameter",
                "flags": {
                  "isOptional": true
                },
                "type": {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "unknown"
                    }
                  ],
                  "name": "InternalPropertyDeclaration",
                  "location": {
                    "page": "decorators",
                    "anchor": "InternalPropertyDeclaration"
                  }
                }
              }
            ],
            "type": {
              "type": "reflection",
              "declaration": {
                "name": "__type",
                "kindString": "Type literal",
                "signatures": [
                  {
                    "name": "__type",
                    "kindString": "Call signature",
                    "parameters": [
                      {
                        "name": "protoOrDescriptor",
                        "kindString": "Parameter",
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "reference",
                              "name": "Object"
                            },
                            {
                              "type": "reference",
                              "name": "ClassElement"
                            }
                          ]
                        }
                      },
                      {
                        "name": "name",
                        "kindString": "Parameter",
                        "flags": {
                          "isOptional": true
                        },
                        "type": {
                          "type": "reference",
                          "name": "PropertyKey"
                        }
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  }
                ]
              }
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "state"
        }
      },
      {
        "name": "Constructor",
        "kindString": "Type alias",
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 26,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "typeParameter": [
          {
            "name": "T",
            "kindString": "Type parameter"
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "name": "__type",
            "kindString": "Type literal",
            "sources": [
              {
                "fileName": "lit-dev-api/api-data/lit-element-2/repo/src/lib/decorators.ts",
                "line": 26
              }
            ]
          }
        },
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "Constructor"
        }
      },
      {
        "name": "InternalPropertyDeclaration",
        "kindString": "Interface",
        "children": [
          {
            "name": "hasChanged",
            "kindString": "Method",
            "flags": {
              "isOptional": true
            },
            "comment": {
              "shortText": "A function that indicates if a property should be considered changed when\nit is set. The function should take the `newValue` and `oldValue` and\nreturn `true` if an update should be requested."
            },
            "signatures": [
              {
                "name": "hasChanged",
                "kindString": "Call signature",
                "parameters": [
                  {
                    "name": "value",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "Type"
                    }
                  },
                  {
                    "name": "oldValue",
                    "kindString": "Parameter",
                    "type": {
                      "type": "reference",
                      "name": "Type"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "boolean"
                }
              }
            ],
            "entrypointSources": [
              {
                "fileName": "src/lit-element.ts",
                "line": 57,
                "moduleSpecifier": "lit-element"
              }
            ],
            "location": {
              "page": "decorators",
              "anchor": "InternalPropertyDeclaration.hasChanged"
            }
          }
        ],
        "sources": [
          {
            "fileName": "src/lib/decorators.ts",
            "line": 169,
            "moduleSpecifier": "lit-element/lib/decorators.js"
          }
        ],
        "typeParameter": [
          {
            "name": "Type",
            "kindString": "Type parameter",
            "default": {
              "type": "intrinsic",
              "name": "unknown"
            }
          }
        ],
        "entrypointSources": [
          {
            "fileName": "src/lit-element.ts",
            "line": 57,
            "moduleSpecifier": "lit-element"
          }
        ],
        "location": {
          "page": "decorators",
          "anchor": "InternalPropertyDeclaration"
        }
      }
    ]
  }
]